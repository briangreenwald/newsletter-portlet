/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.training.newsletter.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.training.newsletter.model.Issue;
import com.liferay.training.newsletter.model.IssueModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Issue service. Represents a row in the &quot;newsletter_Issue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.training.newsletter.model.IssueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssueImpl}.
 * </p>
 *
 * @author Brian Greenwald
 * @see IssueImpl
 * @see com.liferay.training.newsletter.model.Issue
 * @see com.liferay.training.newsletter.model.IssueModel
 * @generated
 */
public class IssueModelImpl extends BaseModelImpl<Issue> implements IssueModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a issue model instance should use the {@link com.liferay.training.newsletter.model.Issue} interface instead.
	 */
	public static final String TABLE_NAME = "newsletter_Issue";
	public static final Object[][] TABLE_COLUMNS = {
			{ "issueId", Types.BIGINT },
			{ "journalArticleId", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "issueNo", Types.INTEGER },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "issueDate", Types.TIMESTAMP },
			{ "issueMonth", Types.INTEGER },
			{ "issueYear", Types.INTEGER },
			{ "byline", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table newsletter_Issue (issueId LONG not null primary key,journalArticleId VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,issueNo INTEGER,title VARCHAR(75) null,description VARCHAR(75) null,issueDate DATE null,issueMonth INTEGER,issueYear INTEGER,byline VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table newsletter_Issue";
	public static final String ORDER_BY_JPQL = " ORDER BY issue.issueDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY newsletter_Issue.issueDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.training.newsletter.model.Issue"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.training.newsletter.model.Issue"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.training.newsletter.model.Issue"),
			true);
	public static long ISSUENO_COLUMN_BITMASK = 1L;
	public static long JOURNALARTICLEID_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long ISSUEDATE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.training.newsletter.model.Issue"));

	public IssueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _issueId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIssueId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _issueId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Issue.class;
	}

	@Override
	public String getModelClassName() {
		return Issue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("issueId", getIssueId());
		attributes.put("journalArticleId", getJournalArticleId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("issueNo", getIssueNo());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("issueDate", getIssueDate());
		attributes.put("issueMonth", getIssueMonth());
		attributes.put("issueYear", getIssueYear());
		attributes.put("byline", getByline());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long issueId = (Long)attributes.get("issueId");

		if (issueId != null) {
			setIssueId(issueId);
		}

		String journalArticleId = (String)attributes.get("journalArticleId");

		if (journalArticleId != null) {
			setJournalArticleId(journalArticleId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer issueNo = (Integer)attributes.get("issueNo");

		if (issueNo != null) {
			setIssueNo(issueNo);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date issueDate = (Date)attributes.get("issueDate");

		if (issueDate != null) {
			setIssueDate(issueDate);
		}

		Integer issueMonth = (Integer)attributes.get("issueMonth");

		if (issueMonth != null) {
			setIssueMonth(issueMonth);
		}

		Integer issueYear = (Integer)attributes.get("issueYear");

		if (issueYear != null) {
			setIssueYear(issueYear);
		}

		String byline = (String)attributes.get("byline");

		if (byline != null) {
			setByline(byline);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public long getIssueId() {
		return _issueId;
	}

	@Override
	public void setIssueId(long issueId) {
		_issueId = issueId;
	}

	@Override
	public String getJournalArticleId() {
		if (_journalArticleId == null) {
			return StringPool.BLANK;
		}
		else {
			return _journalArticleId;
		}
	}

	@Override
	public void setJournalArticleId(String journalArticleId) {
		_columnBitmask |= JOURNALARTICLEID_COLUMN_BITMASK;

		if (_originalJournalArticleId == null) {
			_originalJournalArticleId = _journalArticleId;
		}

		_journalArticleId = journalArticleId;
	}

	public String getOriginalJournalArticleId() {
		return GetterUtil.getString(_originalJournalArticleId);
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public int getIssueNo() {
		return _issueNo;
	}

	@Override
	public void setIssueNo(int issueNo) {
		_columnBitmask |= ISSUENO_COLUMN_BITMASK;

		if (!_setOriginalIssueNo) {
			_setOriginalIssueNo = true;

			_originalIssueNo = _issueNo;
		}

		_issueNo = issueNo;
	}

	public int getOriginalIssueNo() {
		return _originalIssueNo;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		_columnBitmask = -1L;

		_issueDate = issueDate;
	}

	@Override
	public int getIssueMonth() {
		return _issueMonth;
	}

	@Override
	public void setIssueMonth(int issueMonth) {
		_issueMonth = issueMonth;
	}

	@Override
	public int getIssueYear() {
		return _issueYear;
	}

	@Override
	public void setIssueYear(int issueYear) {
		_issueYear = issueYear;
	}

	@Override
	public String getByline() {
		if (_byline == null) {
			return StringPool.BLANK;
		}
		else {
			return _byline;
		}
	}

	@Override
	public void setByline(String byline) {
		_byline = byline;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Issue.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Issue toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Issue)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IssueImpl issueImpl = new IssueImpl();

		issueImpl.setIssueId(getIssueId());
		issueImpl.setJournalArticleId(getJournalArticleId());
		issueImpl.setGroupId(getGroupId());
		issueImpl.setCompanyId(getCompanyId());
		issueImpl.setUserId(getUserId());
		issueImpl.setUserName(getUserName());
		issueImpl.setCreateDate(getCreateDate());
		issueImpl.setModifiedDate(getModifiedDate());
		issueImpl.setIssueNo(getIssueNo());
		issueImpl.setTitle(getTitle());
		issueImpl.setDescription(getDescription());
		issueImpl.setIssueDate(getIssueDate());
		issueImpl.setIssueMonth(getIssueMonth());
		issueImpl.setIssueYear(getIssueYear());
		issueImpl.setByline(getByline());
		issueImpl.setStatus(getStatus());

		issueImpl.resetOriginalValues();

		return issueImpl;
	}

	@Override
	public int compareTo(Issue issue) {
		int value = 0;

		value = DateUtil.compareTo(getIssueDate(), issue.getIssueDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Issue)) {
			return false;
		}

		Issue issue = (Issue)obj;

		long primaryKey = issue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		IssueModelImpl issueModelImpl = this;

		issueModelImpl._originalJournalArticleId = issueModelImpl._journalArticleId;

		issueModelImpl._originalIssueNo = issueModelImpl._issueNo;

		issueModelImpl._setOriginalIssueNo = false;

		issueModelImpl._originalStatus = issueModelImpl._status;

		issueModelImpl._setOriginalStatus = false;

		issueModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Issue> toCacheModel() {
		IssueCacheModel issueCacheModel = new IssueCacheModel();

		issueCacheModel.issueId = getIssueId();

		issueCacheModel.journalArticleId = getJournalArticleId();

		String journalArticleId = issueCacheModel.journalArticleId;

		if ((journalArticleId != null) && (journalArticleId.length() == 0)) {
			issueCacheModel.journalArticleId = null;
		}

		issueCacheModel.groupId = getGroupId();

		issueCacheModel.companyId = getCompanyId();

		issueCacheModel.userId = getUserId();

		issueCacheModel.userName = getUserName();

		String userName = issueCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			issueCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			issueCacheModel.createDate = createDate.getTime();
		}
		else {
			issueCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			issueCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			issueCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		issueCacheModel.issueNo = getIssueNo();

		issueCacheModel.title = getTitle();

		String title = issueCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			issueCacheModel.title = null;
		}

		issueCacheModel.description = getDescription();

		String description = issueCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			issueCacheModel.description = null;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			issueCacheModel.issueDate = issueDate.getTime();
		}
		else {
			issueCacheModel.issueDate = Long.MIN_VALUE;
		}

		issueCacheModel.issueMonth = getIssueMonth();

		issueCacheModel.issueYear = getIssueYear();

		issueCacheModel.byline = getByline();

		String byline = issueCacheModel.byline;

		if ((byline != null) && (byline.length() == 0)) {
			issueCacheModel.byline = null;
		}

		issueCacheModel.status = getStatus();

		return issueCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{issueId=");
		sb.append(getIssueId());
		sb.append(", journalArticleId=");
		sb.append(getJournalArticleId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", issueNo=");
		sb.append(getIssueNo());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", issueDate=");
		sb.append(getIssueDate());
		sb.append(", issueMonth=");
		sb.append(getIssueMonth());
		sb.append(", issueYear=");
		sb.append(getIssueYear());
		sb.append(", byline=");
		sb.append(getByline());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.liferay.training.newsletter.model.Issue");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>issueId</column-name><column-value><![CDATA[");
		sb.append(getIssueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>journalArticleId</column-name><column-value><![CDATA[");
		sb.append(getJournalArticleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueNo</column-name><column-value><![CDATA[");
		sb.append(getIssueNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueDate</column-name><column-value><![CDATA[");
		sb.append(getIssueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueMonth</column-name><column-value><![CDATA[");
		sb.append(getIssueMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueYear</column-name><column-value><![CDATA[");
		sb.append(getIssueYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>byline</column-name><column-value><![CDATA[");
		sb.append(getByline());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Issue.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Issue.class };
	private long _issueId;
	private String _journalArticleId;
	private String _originalJournalArticleId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _issueNo;
	private int _originalIssueNo;
	private boolean _setOriginalIssueNo;
	private String _title;
	private String _description;
	private Date _issueDate;
	private int _issueMonth;
	private int _issueYear;
	private String _byline;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private Issue _escapedModel;
}